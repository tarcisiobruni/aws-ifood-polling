# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: "ifood pooling"

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform: "AWS::Serverless-2016-10-31"

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # lambda role
  ExecutionLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "states:*"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "sqs:*"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "dynamodb:*"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "lambda:*"
                Resource: "*"

  # gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Auth:
        DefaultAuthorizer: MyLambdaRequestAuthorizer
        Authorizers:
          MyLambdaRequestAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt MyAuthFunction.Arn
            Identity:
              QueryStrings:
                - auth

  MyAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: auth/authorizer.handler
      Runtime: nodejs12.x

  # queue
  NewEventsQueueDlq:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 120
      QueueName: ifood-orders-dlq

  NewEventsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ifood-orders
      VisibilityTimeout: 120
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt NewEventsQueueDlq.Arn
        maxReceiveCount: 5

  # queue
  PingSignalQueueDlq:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 120
      QueueName: ping-signal-dlq

  PingSignalQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ping-signal
      VisibilityTimeout: 120
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt PingSignalQueueDlq.Arn
        maxReceiveCount: 5

  #enqueue ping function
  EnqueuePingLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that enqueue pings
      Runtime: nodejs12.x
      CodeUri: src/
      Handler: functions/enqueue-ping/index.handler
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt ExecutionLambdaRole.Arn
      Environment:
        Variables:
          PING_QUEUE_URL: !Ref PingSignalQueue
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Method: POST
            Path: /ping

  #polling function
  PollingIfoodTriggerLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that polling when ping message is enqueued
      Runtime: nodejs12.x
      CodeUri: src/
      Handler: functions/polling-ifood-trigger/index.handler
      MemorySize: 128
      Timeout: 15
      Role: !GetAtt ExecutionLambdaRole.Arn
      Environment:
        Variables:
          NEW_EVENT_QUEUE_URL: !Ref NewEventsQueue
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt PingSignalQueue.Arn
            BatchSize: 1
            Enabled: true

  #listen new events function
  PullNewEventLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that pulls new events from queue
      Runtime: nodejs12.x
      CodeUri: src/
      Handler: functions/new-event-trigger/index.handler
      MemorySize: 128
      Timeout: 15
      Role: !GetAtt ExecutionLambdaRole.Arn
      Environment:
        Variables:
          PUSH_LAMBDA: !Ref SendPushLambdaFunction
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt NewEventsQueue.Arn
            BatchSize: 1
            Enabled: true

  #push function
  SendPushLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that pulls new events from queue
      Runtime: nodejs12.x
      CodeUri: src/
      Handler: functions/push-service/index.handler
      MemorySize: 128
      Timeout: 15
      Role: !GetAtt ExecutionLambdaRole.Arn
